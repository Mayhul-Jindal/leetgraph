---
// const query = `
// query problemsetQuestionList($categorySlug: String, $limit: Int, $skip: Int, $filters: QuestionListFilterInput) {
//   problemsetQuestionList: questionList(
//     categorySlug: $categorySlug
//     limit: $limit
//     skip: $skip
//     filters: $filters
//   ) {
//     total: totalNum
//     questions: data {
//       acRate
//       difficulty
//       paidOnly: isPaidOnly
//       titleSlug
//       topicTags {
//         slug
//       }
//     }
//   }
// }
// `;

// const variables = {
//     categorySlug: "",
//     skip: 0,
//     limit: 50,
//     filters: {},
// };

// const queryOptions = {
//     method: "POST",
//     headers: { "Content-Type": "application/json" },
//     body: JSON.stringify({
//         query: query,
//         variables: variables,
//     }),
// };

// const response = await fetch(`https://leetcode.com/graphql`, queryOptions);
// const json = await response.json();
// console.log(
//     JSON.stringify(json.data.problemsetQuestionList.questions, null, 2),
// );
const mayhuldata = [
    {
        acRate: 52.790129775117734,
        difficulty: "Easy",
        paidOnly: false,
        titleSlug: "two-sum",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "hash-table",
            },
        ],
    },
    {
        acRate: 43.09407686389729,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "add-two-numbers",
        topicTags: [
            {
                slug: "linked-list",
            },
            {
                slug: "math",
            },
            {
                slug: "recursion",
            },
        ],
    },
    {
        acRate: 34.90354016956832,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "longest-substring-without-repeating-characters",
        topicTags: [
            {
                slug: "hash-table",
            },
            {
                slug: "string",
            },
            {
                slug: "sliding-window",
            },
        ],
    },
    {
        acRate: 40.30905874770443,
        difficulty: "Hard",
        paidOnly: false,
        titleSlug: "median-of-two-sorted-arrays",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "binary-search",
            },
            {
                slug: "divide-and-conquer",
            },
        ],
    },
    {
        acRate: 33.96857428320434,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "longest-palindromic-substring",
        topicTags: [
            {
                slug: "two-pointers",
            },
            {
                slug: "string",
            },
            {
                slug: "dynamic-programming",
            },
        ],
    },
    {
        acRate: 48.25630925402313,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "zigzag-conversion",
        topicTags: [
            {
                slug: "string",
            },
        ],
    },
    {
        acRate: 28.71534041724463,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "reverse-integer",
        topicTags: [
            {
                slug: "math",
            },
        ],
    },
    {
        acRate: 17.38086607970974,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "string-to-integer-atoi",
        topicTags: [
            {
                slug: "string",
            },
        ],
    },
    {
        acRate: 56.61473031122988,
        difficulty: "Easy",
        paidOnly: false,
        titleSlug: "palindrome-number",
        topicTags: [
            {
                slug: "math",
            },
        ],
    },
    {
        acRate: 28.20135483929238,
        difficulty: "Hard",
        paidOnly: false,
        titleSlug: "regular-expression-matching",
        topicTags: [
            {
                slug: "string",
            },
            {
                slug: "dynamic-programming",
            },
            {
                slug: "recursion",
            },
        ],
    },
    {
        acRate: 55.4397188181312,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "container-with-most-water",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "two-pointers",
            },
            {
                slug: "greedy",
            },
        ],
    },
    {
        acRate: 65.0626819939864,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "integer-to-roman",
        topicTags: [
            {
                slug: "hash-table",
            },
            {
                slug: "math",
            },
            {
                slug: "string",
            },
        ],
    },
    {
        acRate: 61.51682730236494,
        difficulty: "Easy",
        paidOnly: false,
        titleSlug: "roman-to-integer",
        topicTags: [
            {
                slug: "hash-table",
            },
            {
                slug: "math",
            },
            {
                slug: "string",
            },
        ],
    },
    {
        acRate: 42.9922409712433,
        difficulty: "Easy",
        paidOnly: false,
        titleSlug: "longest-common-prefix",
        topicTags: [
            {
                slug: "string",
            },
            {
                slug: "trie",
            },
        ],
    },
    {
        acRate: 34.67691566725559,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "3sum",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "two-pointers",
            },
            {
                slug: "sorting",
            },
        ],
    },
    {
        acRate: 45.852142309924375,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "3sum-closest",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "two-pointers",
            },
            {
                slug: "sorting",
            },
        ],
    },
    {
        acRate: 60.70567582447328,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "letter-combinations-of-a-phone-number",
        topicTags: [
            {
                slug: "hash-table",
            },
            {
                slug: "string",
            },
            {
                slug: "backtracking",
            },
        ],
    },
    {
        acRate: 36.337363602936094,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "4sum",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "two-pointers",
            },
            {
                slug: "sorting",
            },
        ],
    },
    {
        acRate: 45.61187085742683,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "remove-nth-node-from-end-of-list",
        topicTags: [
            {
                slug: "linked-list",
            },
            {
                slug: "two-pointers",
            },
        ],
    },
    {
        acRate: 40.642066229242,
        difficulty: "Easy",
        paidOnly: false,
        titleSlug: "valid-parentheses",
        topicTags: [
            {
                slug: "string",
            },
            {
                slug: "stack",
            },
        ],
    },
    {
        acRate: 64.48014649649988,
        difficulty: "Easy",
        paidOnly: false,
        titleSlug: "merge-two-sorted-lists",
        topicTags: [
            {
                slug: "linked-list",
            },
            {
                slug: "recursion",
            },
        ],
    },
    {
        acRate: 74.75203297202833,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "generate-parentheses",
        topicTags: [
            {
                slug: "string",
            },
            {
                slug: "dynamic-programming",
            },
            {
                slug: "backtracking",
            },
        ],
    },
    {
        acRate: 53.08560227791812,
        difficulty: "Hard",
        paidOnly: false,
        titleSlug: "merge-k-sorted-lists",
        topicTags: [
            {
                slug: "linked-list",
            },
            {
                slug: "divide-and-conquer",
            },
            {
                slug: "heap-priority-queue",
            },
            {
                slug: "merge-sort",
            },
        ],
    },
    {
        acRate: 64.56431053267121,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "swap-nodes-in-pairs",
        topicTags: [
            {
                slug: "linked-list",
            },
            {
                slug: "recursion",
            },
        ],
    },
    {
        acRate: 59.052049101860305,
        difficulty: "Hard",
        paidOnly: false,
        titleSlug: "reverse-nodes-in-k-group",
        topicTags: [
            {
                slug: "linked-list",
            },
            {
                slug: "recursion",
            },
        ],
    },
    {
        acRate: 56.10933614086386,
        difficulty: "Easy",
        paidOnly: false,
        titleSlug: "remove-duplicates-from-sorted-array",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "two-pointers",
            },
        ],
    },
    {
        acRate: 57.09228326528617,
        difficulty: "Easy",
        paidOnly: false,
        titleSlug: "remove-element",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "two-pointers",
            },
        ],
    },
    {
        acRate: 42.56729233801266,
        difficulty: "Easy",
        paidOnly: false,
        titleSlug: "find-the-index-of-the-first-occurrence-in-a-string",
        topicTags: [
            {
                slug: "two-pointers",
            },
            {
                slug: "string",
            },
            {
                slug: "string-matching",
            },
        ],
    },
    {
        acRate: 17.53810381244195,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "divide-two-integers",
        topicTags: [
            {
                slug: "math",
            },
            {
                slug: "bit-manipulation",
            },
        ],
    },
    {
        acRate: 32.70027916419931,
        difficulty: "Hard",
        paidOnly: false,
        titleSlug: "substring-with-concatenation-of-all-words",
        topicTags: [
            {
                slug: "hash-table",
            },
            {
                slug: "string",
            },
            {
                slug: "sliding-window",
            },
        ],
    },
    {
        acRate: 40.16701625582237,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "next-permutation",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "two-pointers",
            },
        ],
    },
    {
        acRate: 34.30616954979333,
        difficulty: "Hard",
        paidOnly: false,
        titleSlug: "longest-valid-parentheses",
        topicTags: [
            {
                slug: "string",
            },
            {
                slug: "dynamic-programming",
            },
            {
                slug: "stack",
            },
        ],
    },
    {
        acRate: 40.89546238090434,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "search-in-rotated-sorted-array",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "binary-search",
            },
        ],
    },
    {
        acRate: 44.4754545971182,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "find-first-and-last-position-of-element-in-sorted-array",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "binary-search",
            },
        ],
    },
    {
        acRate: 46.18956411620511,
        difficulty: "Easy",
        paidOnly: false,
        titleSlug: "search-insert-position",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "binary-search",
            },
        ],
    },
    {
        acRate: 59.85791084663072,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "valid-sudoku",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "hash-table",
            },
            {
                slug: "matrix",
            },
        ],
    },
    {
        acRate: 61.50129071734217,
        difficulty: "Hard",
        paidOnly: false,
        titleSlug: "sudoku-solver",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "hash-table",
            },
            {
                slug: "backtracking",
            },
            {
                slug: "matrix",
            },
        ],
    },
    {
        acRate: 55.370518555055405,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "count-and-say",
        topicTags: [
            {
                slug: "string",
            },
        ],
    },
    {
        acRate: 71.72529640009017,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "combination-sum",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "backtracking",
            },
        ],
    },
    {
        acRate: 54.682585776789516,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "combination-sum-ii",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "backtracking",
            },
        ],
    },
    {
        acRate: 39.598773836888704,
        difficulty: "Hard",
        paidOnly: false,
        titleSlug: "first-missing-positive",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "hash-table",
            },
        ],
    },
    {
        acRate: 62.19515598536458,
        difficulty: "Hard",
        paidOnly: false,
        titleSlug: "trapping-rain-water",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "two-pointers",
            },
            {
                slug: "dynamic-programming",
            },
            {
                slug: "stack",
            },
            {
                slug: "monotonic-stack",
            },
        ],
    },
    {
        acRate: 40.554324763562875,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "multiply-strings",
        topicTags: [
            {
                slug: "math",
            },
            {
                slug: "string",
            },
            {
                slug: "simulation",
            },
        ],
    },
    {
        acRate: 28.110200880233833,
        difficulty: "Hard",
        paidOnly: false,
        titleSlug: "wildcard-matching",
        topicTags: [
            {
                slug: "string",
            },
            {
                slug: "dynamic-programming",
            },
            {
                slug: "greedy",
            },
            {
                slug: "recursion",
            },
        ],
    },
    {
        acRate: 40.5094308574332,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "jump-game-ii",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "dynamic-programming",
            },
            {
                slug: "greedy",
            },
        ],
    },
    {
        acRate: 78.53848003181548,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "permutations",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "backtracking",
            },
        ],
    },
    {
        acRate: 59.42509119746233,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "permutations-ii",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "backtracking",
            },
        ],
    },
    {
        acRate: 74.66750006887621,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "rotate-image",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "math",
            },
            {
                slug: "matrix",
            },
        ],
    },
    {
        acRate: 68.73083763599581,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "group-anagrams",
        topicTags: [
            {
                slug: "array",
            },
            {
                slug: "hash-table",
            },
            {
                slug: "string",
            },
            {
                slug: "sorting",
            },
        ],
    },
    {
        acRate: 34.95327576848696,
        difficulty: "Medium",
        paidOnly: false,
        titleSlug: "powx-n",
        topicTags: [
            {
                slug: "math",
            },
            {
                slug: "recursion",
            },
        ],
    },
];

const {data = mayhuldata} = Astro.props;
---

<div id="canvas" class="h-screen" data-message={data}></div>
<!-- 
- [ ] collect basic data from leetcode
    - [ ] chech is github supports or not
    - [ ] basically have t
- [ ] setup indexeddb
-->

<script>
    import { Application, Graphics } from "pixi.js";
    import json from '../questions/data.json';

    console.log(json);
    (async () => {
        const app = new Application();
        const div = document.getElementById("canvas");
        await app.init({
            resizeTo: div,
            backgroundAlpha: 0,
            antialias: true,
        });
        div.appendChild(app.canvas);
    })();
</script>
